---
- name: PLAY #1  create VM in Proxmox and get macaddress 
  hosts: localhost

 
  gather_facts: False
  
  
  vars:
    hostname_client: "{{ host_to_provision }}"
    release: "18.04"
    architecture: "x86_64"
    host_to_provision: use    ap -e 'host_to_provision=O2-10-PCV6' 3_provision_new_machine_with_ddns.yml

    
    
  pre_tasks:
  - name: this host will be created
    debug: var=host_to_provision
    
  - name:
    set_fact:
      macaddresses_of_hostnames: {}

  - name: create VM in pve01
    proxmox_kvm:
      api_host: pve01
      api_user: root@pam
      api_password: "{{ hostvars['pve01']['server_password'] }}"
      name        : "{{ host_to_provision }}"
      # vmid: 
      node        : pve01
      cores       : 2 
      memory      : 4096
      # ostype:   #for some guests only
      # update      : yes
      sata		   : '{"sata0":"local-lvm:30,format=raw"}'
      #sata		   : '{"sata0":"pve-storage:30,format=raw"}'
      #scsihw	  : virtio-scsi-pci | lsi
      #virtio      : '{"virtio0":"pve-storage:30"}'
      #
      net         : '{"net0":"virtio,bridge=vmbr1,tag=140"}'
    delegate_to: pve01
    register: vm_return
    tags: create_vm

  - name: MAC get
    set_fact:
      macaddress: "{{ vm_return.mac.net0 }}"
      cacheable: yes
    tags: create_vm
      
  - name: build dict
    set_fact:
      macaddresses_of_hostnames: "{{ macaddresses_of_hostnames | combine({ hostname_client :macaddress }) }}"

  - name: print hostname mac dictionary
    debug: var=macaddresses_of_hostnames
     

  - name: wait 10s until VM has been created
    wait_for:
      timeout: 10
    #delegate_to: boss
    tags: create_vm


  - name: Remove old DNs record
    shell: "/root/remove_host_from_dns.sh {{ host_to_provision }}"
    delegate_to: boss
    
 
 ## ToDo: wake on LAN physical machine (pm)
     
- name: PLAY #2  do minimal network installation 
  hosts: boss
   
  tasks:
  - name: get dict from first play
    set_fact: my_macaddresses_of_hostnames={{hostvars['localhost']['macaddresses_of_hostnames']}}

  - name: create entry in dhcpd.conf   
    include_role:
      name: do_minimal_networkinstallations_unattended
    vars:
      create_entry_for_host: True 
      macaddresses_of_hostnames: "{{ my_macaddresses_of_hostnames }}"

  - name: first boot of new VM
    proxmox_kvm:
      api_host: pve01
      api_user: root@pam
      api_password: "{{ hostvars['pve01']['server_password'] }}"
      name        : "{{ host_to_provision }}"
      node        : pve01
      state: started
    delegate_to: pve01


  - name: wait 60s until VM has booted
    wait_for:
      timeout: 60
    
  - name: remove entry from dhcpd.conf   
    include_role:
      name: do_minimal_networkinstallations_unattended
    vars:
      create_entry_for_host: False     
      
  - local_action: shell date +'%F %T'
    register: time_start
     
  - name: show start time
    debug: msg="{{ time_start.stdout }}"
 
  - name: Wait for system to become reachable
    wait_for:
      host: "{{ host_to_provision }}"
      port: 22
      delay:   120
      timeout: 1800

  - local_action: shell date +'%F %T'
    register: time_end
    tags: install_minimal_os

         
  - name: show end time
    debug: msg="{{ time_end.stdout }}"
    tags: install_minimal_os

    
##
##

- name: PLAY #3  Installation of default software
  hosts: "{{ host_to_provision }}"       
      
  roles:
  - ubuntu_clients/install_software/install_desktop
#  - ubuntu_clients/install_software/install_packages-ubuntu-repo
#  - ubuntu_clients/install_software/install_packages-others	
#  - ubuntu_clients/install_software/install_update_opera
#  - ubuntu_clients/install_software/install_update_geogebra
#  - ubuntu_clients/install_software/install_sun_java
  tags: install_default_software
  
  tasks:        
  - name: reboot the host
    shell: sleep 2 && shutdown -r now "Ansible updates triggered"
    async: 1
    poll: 0
    ignore_errors: true
    tags: install_default_software
      
  - name: wait for host after reboot
    local_action: 
      module: wait_for 
        host="{{inventory_hostname}}" 
        delay=15 
        state=started 
        timeout=60  
    tags: install_default_software
  

##
##

- name: PLAY #4  configure new machine 
  hosts: "{{ host_to_provision }}"   

  vars:
    launcher_icon_size: 30


  roles:
  - ubuntu_clients/configure_auto_hostname
  - ubuntu_clients/configure_defaults4machine/configure_default-user_and_guest-user
  - ubuntu_clients/configure_defaults4machine/configure_name_resolution
  - ubuntu_clients/configure_defaults4machine/configure_ntp-client
  - ubuntu_clients/configure_defaults4machine/configure_smb-client
  - ubuntu_clients/configure_defaults4machine/disable_some_services
  - ubuntu_clients/configure_defaults4machine/remove_amazon_from_menu
  - ubuntu_clients/configure_defaults4machine/remove_packages_and_autoclean
  - ubuntu_clients/configure_defaults4users/create_dconf_directories
  - ubuntu_clients/configure_defaults4users/set_launcher_in_schemafile
  - ubuntu_clients/configure_defaults4users/set_unity_defaults
  - ubuntu_clients/configure_defaults4users/disable_user_services
  - ubuntu_clients/configure_defaults4users/set_opera_cachedir-in-tmp
  - ubuntu_clients/configure_defaults4users/set_firefox_startup-homepage
  - ubuntu_clients/configure_defaults4users/set_firefox_cachedir-in-tmp
  - ubuntu_clients/configure_lehrerkiosk/configure_autologin4guest
  - ubuntu_clients/configure_lehrerkiosk/set_appdefaults4localuser-vlc
  tags: configure_default_client
  

  tasks:
  - name: set distupgrade never
    lineinfile:
      dest: /etc/update-manager/release-upgrades
      state: present
      regexp: "^Prompt="
      line: "Prompt=never"   
    
  - name: reboot the host
    shell: sleep 2 && shutdown -r now "Ansible updates triggered"
    async: 1
    poll: 0
    ignore_errors: true
      
  - name: wait for host after reboot
    local_action: 
      module: wait_for 
        host="{{inventory_hostname}}" 
        delay=15 
        state=started 
        timeout=60  


  
